#Importing Various Libraries
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

#Uploading the Data
df=pd.read_csv("creditcard.csv")
df

#Understanding the Data
print(df.columns)
df.head()
df.tail()
df.shape
df.info()

#Describing the Data
df.describe()

#Imbalance in Data
fraudcases=df[df['Class']==1]
validcases=df[df['Class']==0]
outlierfrac=len(fraudcases)/float(len(validcases))
print(outlierfrac)
print('Fraud Cases:{}'.format(len(df[df['Class']==1])))
print('Valid Transactions:{}'.format(len(df[df['Class']==0])))

print("Amount details of Fraud Transactions")
fraudcases.Amount.describe()

print("Details of Valid Transactions")
validcases.Amount.describe()

#Visualization
a=df.corr()
fig=plt.figure(figsize=(12,9))
sns.heatmap(a,vmax=0.8,square=True)
plt.show()

#Modelling
X=df.drop(['Class'],axis=1)
Y=df['Class']
print(X.shape)
print(Y.shape)
xData=X.values
yData=Y.values

xData

from sklearn.model_selection import train_test_split
x_train,x_test,y_train,y_test=train_test_split(xData,yData,test_size=0.2,random_state=42)
x_train
y_train
x_test
y_test

#Applying Random Forest Regression
from sklearn.ensemble import RandomForestClassifier
classifier=RandomForestClassifier(criterion='entropy',max_depth=10,n_estimators=20,random_state=0)
classifier.fit(x_train,y_train)
pred=classifier.predict(x_test)

#Model Performance
from sklearn.metrics import classification_report,confusion_matrix,accuracy_score,recall_score,precision_score,f1_score
acc= accuracy_score(y_test,pred)
print("The accuracy is {}".format(acc))
prec= precision_score(y_test,pred)
print("The precision is {}".format(prec))
rec= recall_score(y_test,pred)
print("The recall is {}".format(rec))
f1= f1_score(y_test,pred)
print("The F1-Score is {}".format(f1))

#Confusion Matrix
result = confusion_matrix(y_test, pred)
print("Confusion Matrix:")
print(result)

#Heatmap
LABELS = ['Normal', 'Fraud']
conf_matrix = confusion_matrix(y_test, pred)
plt.figure(figsize=(5, 5))
sns.heatmap(conf_matrix, xticklabels=LABELS, yticklabels=LABELS, annot=True, fmt="d");
plt.title("Confusion matrix")
plt.ylabel('True class')
plt.xlabel('Predicted class')
plt.show()
